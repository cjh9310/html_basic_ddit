/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2021-12-09 03:19:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._09;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.or.ddit.utils.CookieUtils;
import java.net.URLDecoder;
import java.net.URLEncoder;

public final class cookieDesc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("kr.or.ddit.utils.CookieUtils");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>09/cookieDesc.jsp</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4> Cookie </h4>\r\n");
      out.write("<pre>\r\n");
      out.write("\t: Http Stateless 의 단점을 보완하기 위해 최소한의 상태 정보를 클라이언트쪽에 저장하는 개념.\r\n");
      out.write("\t\r\n");
      out.write("\t쿠키 사용 단계\r\n");
      out.write("\t1. 쿠키 생성(name, value 필수 속성)\r\n");
      out.write("\t2. response(set-cookie 헤더) 에 쿠키를 포함하여 클라이언트로 전송.\r\n");
      out.write("\t\r\n");
      out.write("\t3. response에 포함된 쿠키를 자기 쿠키 저장소에 저장\r\n");
      out.write("\t4. 다음번 request(cookie 헤더)에 해당 쿠키를 서버로 재전송.\r\n");
      out.write("\t\r\n");
      out.write("\t5. request로부터 재전송된 쿠키 확보 후 상태 복원\r\n");
      out.write("\t");

		Cookie firstCookie = new Cookie("firstCookie", "FIRST_VALUE");
		response.addCookie(firstCookie);
		
		String searchedValue = new CookieUtils(request).getCookieValue("firstCookie");
		out.println("찾은 쿠키 : firstCookie");
		out.println("찾은 쿠키값 :"+searchedValue);
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t쿠키의 속성들\r\n");
      out.write("\t1. name(required) : String, 영문자와 숫자, _\r\n");
      out.write("\t2. value(required) : String, 특수문자가 포함된 경우, URL인코딩 방식으로 인코딩/디코딩 과정 필요.\r\n");
      out.write("\t\r\n");
      out.write("\t3. domain(host) : 쿠키의 재전송 여부를 결정하는 기준. 요청의 서버와 쿠키의 도메인이 패턴 매칭이 되는 경우에만 재전송.\r\n");
      out.write("\t\tdomain 구조 (TopLevelDomain 에 따른 분류)\r\n");
      out.write("\t\twww.naver.com - 3level 구조(GTLD 구조)\r\n");
      out.write("\t\twww.naver.co.kr - 4level 구조 (NTLD 구조)\r\n");
      out.write("\t\tmail.naver.co.kr - 4level 구조 (NTLD 구조)\r\n");
      out.write("\t\tblog.naver.co.kr - 4level 구조 (NTLD 구조)\r\n");
      out.write("\t\tcafe.naver.co.kr - 4level 구조 (NTLD 구조)\r\n");
      out.write("\t4. path : 쿠키의 재전송 여부를 결정하는 기준. path 이하의 주소 체계로 발생한 요청에만 재전송.\r\n");
      out.write("\t\t\t: 생략시 쿠키를 생성할 때의 경로가 반영.\r\n");
      out.write("\t\t<a href=\"../09/viewCookie.jsp\">동일 경로에서 쿠키 확인하기</a>\r\n");
      out.write("\t\t<a href=\"../10/viewCookie.jsp\">다른 경로에서 쿠키 확인하기</a>\r\n");
      out.write("\t5. maxAge : 쿠키의 유효기간, 기본값으로 세션의 생명주기를 따름.\r\n");
      out.write("\t\t: 시간은 초단위, \r\n");
      out.write("\t\t0 - 쿠키 삭제 가능(단, 모든 속성이 동일한 경우에만 삭제)\r\n");
      out.write("\t\t-1 - 브라우저 종료시 자동 삭제되는 쿠키로 설정.(단, 모든 속성이 동일한 경우에만 삭제)\r\n");
      out.write("\t");

// 		String koreanValue = URLEncoder.encode("한글값", "UTF-8");
// 		Cookie koreanCookie = new Cookie("koreanCookie", koreanValue);
// 		response.addCookie(koreanCookie);

// 		Cookie allDomainCookie = new Cookie("allDomain", "ALL~DOMAIN");
// 		allDomainCookie.setDomain(".naver.com"); // 네이버를 대상으로 네이버의 모든 호스트 방향으로 재전송.
// 		response.addCookie(allDomainCookie);

		Cookie allPath = new Cookie("allPath", "ALL_PATH");
		allPath.setPath("/");
		response.addCookie(allPath);
		
		Cookie longLive = new Cookie("longLive", "LONG_LIVE");
		longLive.setPath(request.getContextPath()+"/");
		longLive.setMaxAge(0);
		response.addCookie(longLive);
	
      out.write("\r\n");
      out.write("</pre>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
